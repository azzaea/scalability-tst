repo <- "wdl"
issue_list <-
gh("/repos/:owner/:repo/issues", owner = owner, repo = repo,
state = "all", .limit = Inf)
issue_list %>%
data_frame(state = map_chr(., "state") )%>%
group_by(state) %>% summarise(n = n())
View(issue_list)
issue_list <-
gh("/repos/:owner/:repo/issues", owner = owner, repo = repo,
state = "all", since = "2020-07-09T00:00:00Z", .limit = Inf)
issue_list %>%
data_frame(state = map_chr(., "state") )%>%
group_by(state) %>% summarise(n = n())
issue_list <-
gh("/repos/:owner/:repo/issues", owner = owner, repo = repo,
state = "open", since = "2020-07-09T00:00:00Z", .limit = Inf)
issue_list %>%
data_frame(state = map_chr(., "state") )%>%
group_by(state) %>% summarise(n = n())
issue_list <-
gh("/repos/:owner/:repo/issues", owner = owner, repo = repo,
state = "closed", since = "2020-07-09T00:00:00Z", .limit = Inf)
issue_list %>%
data_frame(state = map_chr(., "state") )%>%
group_by(state) %>% summarise(n = n())
issue_list <-
gh("/repos/:owner/:repo/issues", owner = owner, repo = repo,
state = "all", since = "2020-07-09T00:00:00Z", .limit = Inf)
issue_list %>%
data_frame(state = map_chr(., "state") )%>%
group_by(state) %>% summarise(n = n())
?gh
issue_list <-
gh("/repos/:owner/:repo/issues", owner = owner, repo = repo,
state = "all", .limit = Inf)
issue_list %>%
data_frame(state = map_chr(., "state") )%>%
group_by(state) %>% summarise(n = n())
tmp <- ghdata %>% map(function(x) state = map_chr(x, "state")) %>% setNames(repos$repo)
tmp %>% map_dfr(table, .id = "wfms")
######################### The fields I want: ################################################
#open issues,
#closed issues,
owner <- "openwdl"
repo <- "wdl"
licence <-  gh("/repos/:owner/:repo/license", owner = owner, repo = repo,
.limit = Inf)
licence
list(licence)
str(licence)
licence %>% data_frame(state = map_chr(., "license") )
issue_list %>%
data_frame(user = map_chr(., c("license", "key")))
licence
issue_list %>% data_frame(user = map_chr(., c("license", "key")))
licence <-  gh("/repos/:owner/:repo/license", owner = owner, repo = repo,
.limit = Inf)
str(licence)
licence %>% data_frame(user = map_chr(., c("license", "key"))),
group_by(state) %>% summarise(n = n())
licence
licence %>% map_chr(., c("license", "key"))
licence %>% map_chr_hack(., c("license", "key"))
licence %>% map_chr(., c("license", "key"))
licence %>% map_chr(., c( "key"))
licence %>% map_chr("key")
licence %>% map("key")
licence$license %>% map("key")
licence %>% map("license","key")
licence %>% map(c("license","key"))
licence %>% map(., c("license","key"))
licence %>% data_frame(user = map_chr(., c("license", "key")))
licence %>% map_chr(., c("license", "key"))
licence %>% map(., c("license", "key"))
licence %>% map(., c("key"))
issues.pulls <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/issues", owner = .x, repo = .y, state = "all",
.limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
map(function(x) state = map_chr(x, "state")) %>% setNames(repos$repo) %>%
map_dfr(table, .id = "wfms")
issues.pulls
license <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/license", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c"))
licence %>% map(., c("license", "key"))
licence %>%
licence %>% map(., c("key"))
# licence %>%
licence %>% map(., c("key"))
# licence %>%
license %>% map(., c("key"))
license %>% map(., c("license", "key"))
license %>% map_df(., c("license", "key"))
license %>% map_dfr(., c("license", "key"))
license %>% map_dfc(., c("license", "key"))
license %>% map_dfc(., c("license", "key"))%>% setNames(repos$repo)
issues.pulls
license %>% tibble(license = map_chr(., c("license", "key")))
license %>% tibble(license = map_chr(c("license", "key"))) #%>% setNames(repos$repo)
license %>% tibble(license = map_chr(., c("license", "key"))) #%>% setNames(repos$repo)
license %>% tibble(license = map_chr(., c("license", "key"))) %>% View()
license %>% tibble(number = map_int(., "number"), license = map_chr(., c("license", "key")))# %>% View()
license %>% tibble( license = map_chr(., c("license", "key"))) %>% View()
license
license %>% map_dfc(., c("license", "key"))
license %>% setNames(repos$repo) %>%
tibble( license = map_chr(., c("license", "key"))) %>% View()
license %>% setNames(repos$repo)
license %>%
tibble(wfms = repos$repo, license = map_chr(., c("license", "key"))) %>% View()
license %>%
tibble(wfms = repos$repo, license = map_chr(., c("license", "key"))) %>% View()
license %>%
tibble(wfms = repos$repo, license = map_chr(., c("license", "key"))) %>%
select(wfms, license)
license <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/license", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
tibble(wfms = repos$repo, license = map_chr(., c("license", "key"))) %>%
select(wfms, license)
license
issues.pulls
conts <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/contributors", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c"))
conts
licence %>% data_frame(user = map_chr(., c("license", "key")))
licence %>% map(., c("license", "key"))
#contributors,
cons <- gh("/repos/:owner/:repo/contributors", owner = owner, repo = repo,
.limit = Inf)
cons
str(cons)
######################### The fields I want: ################################################
#open issues,
#closed issues,
owner <- "swift-lang"
repo <- "swift-t"
#contributors,
cons <- gh("/repos/:owner/:repo/contributors", owner = owner, repo = repo,
.limit = Inf)
str(cons)
length(cons)
conts
conts %>% map(length)
conts %>% setNames(repos$repo) %>%
map_dfr(length, .id = "wfms")
conts %>% setNames(repos$repo) %>%
map_dfc(length, .id = "wfms")
conts %>% setNames(repos$repo) %>%
map_dfc(length)
conts %>% #setNames(repos$repo) %>%
map_dfc(length)
conts %>% setNames(repos$repo) %>%
# map_dfc(length)
map(length)
conts %>% setNames(repos$repo) %>%
map_dfc(length)
conts %>% setNames(repos$repo) %>%
map_dfr(length)
conts %>% setNames(repos$repo) %>%
mutate(wfms = repos$repo, contributors = map_int(., length))
conts %>% setNames(repos$repo) %>%
mutate(wfms = repos$repo, contributors = map(., length))
conts %>% #setNames(repos$repo) %>%
mutate(wfms = repos$repo, contributors = map(., length))
conts %>% #setNames(repos$repo) %>%
mutate(wfms = repos$repo)
conts %>% #setNames(repos$repo) %>%
as_tibble() %>%
mutate(wfms = repos$repo)
conts %>% #setNames(repos$repo) %>%
as_tibble()
conts %>%
tibble( contributors = map(., length))
conts %>%
tibble( contributors = map_int(., length))
conts %>%
tibble(wfms = repos$repo, contributors = map_int(., length))
conts <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/contributors", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
tibble(wfms = repos$repo, contributors = map_int(., length)) %>%
select(-`.`)
conts
#first commit,
com <- gh("/repos/:owner/:repo/commits", owner = owner, repo = repo,
.limit = Inf)
#first commit,
com <- gh("/repos/:owner/:repo/commits", owner = owner, repo = repo,
until = "2018-01-01T00:00:00Z",
.limit = Inf, .token = "37fae244f9523252594034345b1ef99f34aaa39c")
#first commit,
com <- gh("/repos/:owner/:repo/commits", owner = owner, repo = repo,
until = "2017-01-01T00:00:00Z",
.limit = Inf, .token = "37fae244f9523252594034345b1ef99f34aaa39c")
head(com)
View(com)
com[[1]] %>% map("commit")
com %>% map("commit")
com %>% map(c("commit", "author", "date" ))
com %>% map_df(c("commit", "author", "date" ))
com %>% map_dfr(c("commit", "author", "date" ))
com %>% map_dfc(c("commit", "author", "date" ))
com %>% map(c("commit", "author", "date" ))
## first commit ------------------------------------------------------------------------
com <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/commits", owner = .x, repo = .y, .limit = Inf,
until = "2017-01-01T00:00:00Z",
.token = "37fae244f9523252594034345b1ef99f34aaa39c"))
com %>% map(c("commit", "author", "date" ))
com
com %>%  map(function(x) state = map_chr(x, c("commit", "author", "date" )))
com %>%  map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>% str()
com %>% setNames(repos$repo) %>%
%>%  map(function(x) state = map_chr(x, c("commit", "author", "date" )))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>% str()
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>% map(as.Date)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>% map(sort)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>% map(sort) %>% str()
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>% map(sort) %>% map(1)
?top_n
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(slice_min, 1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(slice_head, 1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_df(1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_dfr(1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% tibble(firstcommit = map(1))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% tibble(., firstcommit = map(1))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map_df(as.Date)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% tibble(., firstcommit = map(1))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_df(1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_dfr(1)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_dfr(1, .id = "wfms")
com %>%
tibble(., commit = map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1))
com %>%
tibble(., commit = map(function(x) state = map_chr(x, c("commit", "author", "date" ))))
com %>%
tibble(., commit = map_chr(. , c("commit", "author", "date" )) )
com %>%
tibble(., commit = map_chr(. , c("commit", "author", "date" ))  %>%
map(as.Date) %>%  map(sort) %>% map(1))
com %>%
tibble(., commit = map_chr(. , c("commit", "author", "date" )) %>%
(as.Date) %>%  (sort) %>% map(1))
com %>%
tibble(., commit = map_chr(. , c("commit", "author", "date" )) %>% as.Date() %>%
sort() %>% map(1))
com %>%
tibble(., commit = map_chr(. , c("commit", "author", "date" )))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" )))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_dfr(1, .id = "wfms")
com %>%
tibble(., commit = map_chr(. , c("commit", "author", "date" )) %>% as.Date() %>%
sort() %>% map(1))
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1, .id = "wfms")
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_dfr(1, .id = "wfms")
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort)
com %>% setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1)
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1)
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>%
map_dfr(1, .id = "wfms")
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1)
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>%
tibble(wfms = repos$repo, commit = map(., 1))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>%# map(1) %>%
tibble(wfms = repos$repo, commit = map(., 1))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>%# map(1) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1)))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>%# map(1) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1))) %>% View()
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1))) %>% View()
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1)
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map_chr(1) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1))) %>% View()
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character)
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1))) %>% View()
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = .) %>% View()
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = .)
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = .) %>% View()
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1)))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1)))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map(., c(1,1)), t = unnest(.))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map(., (1)))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map_chr(., (1)))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map_chr(., 1))
com %>% #setNames(repos$repo) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, commit = map_chr(., 1)) %>%
select(-`.`)
rm(list=ls())
library(gh)
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(purrr))
library(tidyr)
library(curl)
suppressPackageStartupMessages(library(readr))
repos <- tribble(~owner, ~repo,
"common-workflow-language", "common-workflow-language",
"openwdl", "wdl",
"nextflow-io", "nextflow",
"swift-lang", "swift-t",
# "toil", "toil",
# "cwltool", "cwltool"
# "broadinstitute", "cromwell ",
)
## open/closed issues ------------------------------------------------------------
issues.pulls <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/issues", owner = .x, repo = .y, state = "all",
.limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
map(function(x) state = map_chr(x, "state")) %>% setNames(repos$repo) %>%
map_dfr(table, .id = "wfms")
## license ------------------------------------------------------------------------
license <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/license", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
tibble(wfms = repos$repo, license = map_chr(., c("license", "key"))) %>%
select(-`.`)
## contributors ---------------------------------------------------------------------
contribs <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/contributors", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
tibble(wfms = repos$repo, contributors = map_int(., length)) %>%
select(-`.`)
## first commit ------------------------------------------------------------------------
first.commit <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/commits", owner = .x, repo = .y, .limit = Inf,
until = "2017-01-01T00:00:00Z",
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, first.com = map_chr(., 1)) %>%
select(-`.`)
## gitter/slack channels/mailing list,workflows repositories,-----------------------------
## Aggregating data,----------------------------------------------------------------------
left_join(repos, first.commit, issues.pulls, )
## Aggregating data,----------------------------------------------------------------------
left_join(repos, first.commit)
repos
first.commit
## Aggregating data,----------------------------------------------------------------------
left_join(first.commit, contribs)
## Aggregating data,----------------------------------------------------------------------
plyr::join_all(list(contribs, first.commit, issues.pulls, license))
## Aggregating data,----------------------------------------------------------------------
join_all(list(contribs, first.commit, issues.pulls, license)) %>% as_tibble()
library(plyr)
## Aggregating data,----------------------------------------------------------------------
join_all(list(contribs, first.commit, issues.pulls, license)) %>% as_tibble()
library(gh)
library(plyr)
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(purrr))
library(tidyr)
library(curl)
suppressPackageStartupMessages(library(readr))
repos <- tribble(~owner, ~repo,
"common-workflow-language", "common-workflow-language",
"openwdl", "wdl",
"nextflow-io", "nextflow",
"swift-lang", "swift-t",
# "toil", "toil",
# "cwltool", "cwltool"
# "broadinstitute", "cromwell ",
)
## open/closed issues ------------------------------------------------------------
issues.pulls <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/issues", owner = .x, repo = .y, state = "all",
.limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
map(function(x) state = map_chr(x, "state")) %>% setNames(repos$repo) %>%
map_dfr(table, .id = "wfms")
issues.pulls
repos
issues.pulls
## license ------------------------------------------------------------------------
license <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/license", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
tibble(wfms = repos$repo, license = map_chr(., c("license", "key"))) %>%
select(-`.`)
license
## contributors ---------------------------------------------------------------------
contribs <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/contributors", owner = .x, repo = .y, .limit = Inf,
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
tibble(wfms = repos$repo, contributors = map_int(., length)) %>%
select(-`.`)
## first commit ------------------------------------------------------------------------
first.commit <- map2(repos$owner, repos$repo,
~gh("/repos/:owner/:repo/commits", owner = .x, repo = .y, .limit = Inf,
until = "2017-01-01T00:00:00Z",
.token = "37fae244f9523252594034345b1ef99f34aaa39c")) %>%
map(function(x) state = map_chr(x, c("commit", "author", "date" ))) %>%
map(as.Date) %>%  map(sort) %>% map(1) %>% map(as.character) %>%
tibble(wfms = repos$repo, first.com = map_chr(., 1)) %>%
select(-`.`)
## Aggregating data,----------------------------------------------------------------------
join_all(list(contribs, first.commit, issues.pulls, license)) %>% as_tibble()
?map2
xtable::print.xtable(join_all(list(contribs, first.commit, issues.pulls, license)), type = "latex")
xtable::xtable(join_all(list(contribs, first.commit, issues.pulls, license)), type = "latex")
## Aggregating data,----------------------------------------------------------------------
join_all(list(first.commit, contribs, issues.pulls, license)) %>% as_tibble()
xtable::xtable(join_all(list(first.commit, contribs, issues.pulls, license)), type = "latex")
issues.pulls
first.commit
